<?xml version="1.0" encoding="utf-8"?>
<project name="Shopware" basedir="../" default="build">

    <property name="build.dir" location="${basedir}/build"/>

    <property file="${build.dir}/build.properties"/>
    <property file="${build.dir}/build.properties.dist"/>

    <target name="build" depends="build-daily"/>

    <target name="build-daily" depends="build-log-dir">
        <parallel>
            <antcall target="test-unit"/>
            <antcall target="test-static"/>
        </parallel>
        <parallel>
            <antcall target="build-phpdoc"/>
            <antcall target="build-phpcb"/>
        </parallel>
    </target>

    <target name="build-continuous">
        <antcall target="test-unit-continuous"/>
    </target>

    <target name="build-unit" depends="build-composer-install, build-config, build-database, build-snippets-deploy, build-cache-dir" />

    <target name="test-unit" depends="unit-library, unit-shopware"/>

    <target name="test-unit-continuous" depends="unit-shopware-continuous"/>

    <target name="configure" description="Set up build-variables">
        <input message="Please enter db-host:"
               addproperty="user.db.host"
               defaultvalue="${db.host}" />

        <input message="Please enter db-name:"
               addproperty="user.db.name"
               defaultvalue="${db.name}" />

        <input message="Please enter db-username:"
               addproperty="user.db.user"
               defaultvalue="${db.user}" />

        <input message="Please enter db-password:"
               addproperty="user.db.password">
            <handler type="secure"/>
        </input>

        <input message="Please enter app.host:"
               addproperty="user.app.host"
               defaultvalue="${app.host}" />

        <input message="Please enter app.path:"
               addproperty="user.app.path"
               defaultvalue="${app.path}" />

        <propertyfile
                file="${build.dir}/build.properties"
                comment="Project properties">
            <entry  key="db.host"     value="${user.db.host}"/>
            <entry  key="db.name"     value="${user.db.name}"/>
            <entry  key="db.user"     value="${user.db.user}"/>
            <entry  key="db.password" value="${user.db.password}"/>
            <entry  key="app.path"    value="${user.app.path}"/>
            <entry  key="app.host"    value="${user.app.host}"/>
        </propertyfile>
    </target>

    <target name="check-composer-binary">
        <available file="${basedir}/composer.phar" property="composer.binary.present"/>
    </target>

    <target name="install-composer-binary" depends="check-composer-binary"  unless="composer.binary.present">
        <exec executable="bash" failonerror="true">
            <arg value="-c" />
            <arg value="curl -s http://getcomposer.org/installer | php" />
        </exec>
    </target>

    <target name="update-composer-binary" depends="install-composer-binary">
        <exec executable="php">
            <arg value="composer.phar" />
            <arg value="self-update" />
            <arg value="--no-interaction" />
        </exec>
    </target>

    <target name="build-composer-install" depends="update-composer-binary">
        <exec executable="php" failonerror="true">
            <arg value="composer.phar" />
            <arg value="install" />
            <arg value="--no-interaction" />
            <arg value="--optimize-autoloader" />
        </exec>
    </target>

    <target name="build-composer-update" depends="update-composer-binary">
        <exec executable="php" failonerror="true">
            <arg value="composer.phar" />
            <arg value="update" />
            <arg value="--no-interaction" />
        </exec>
    </target>

    <target name="build-database" depends="build-database-foundation, build-database-apply-deltas, build-database-deploy-demodata" />

    <target name="build-database-foundation">
        <concat destfile="${build.dir}/scripts/deploy.template.sql">
            <fileset file="${build.dir}/scripts/deploy.create.sql"/>
            <fileset file="${sql.dir}/install/latest.sql"/>
            <fileset file="${build.dir}/scripts/deploy.shopconfig.sql"/>
        </concat>

        <copy file="${build.dir}/scripts/deploy.template.sql" toFile="${build.dir}/scripts/deploy.sql">
            <filterset>
                <filter token="database" value="${db.name}"/>
                <filter token="host" value="${app.host}"/>
                <filter token="path" value="${app.path}"/>
            </filterset>
        </copy>

        <exec executable="${script.mysql}" failonerror="true" input="${build.dir}/scripts/deploy.sql">
            <arg value="-u${db.user}"/>
            <arg value="--password=${db.password}"/>
            <arg value="--host=${db.host}"/>
        </exec>

        <delete file="${build.dir}/scripts/deploy.template.sql"/>
        <delete file="${build.dir}/scripts/deploy.sql"/>
    </target>

    <target name="build-database-apply-deltas">
        <exec executable="php" failonerror="true">
            <arg value="${build.dir}/ApplyDeltas.php"/>
            <arg value="--password=${db.password}"/>
            <arg value="--host=${db.host}"/>
            <arg value="--username=${db.user}"/>
            <arg value="--dbname=${db.name}"/>
        </exec>
    </target>

    <target name="build-database-deploy-demodata">
        <concat destfile="${build.dir}/scripts/demo.template.sql">
            <fileset file="${demo.data}"/>
            <fileset file="${build.dir}/scripts/deploy.shopconfig.sql"/>
        </concat>

        <copy file="${build.dir}/scripts/demo.template.sql" toFile="${build.dir}/scripts/demo.deploy.sql">
            <filterset>
                <filter token="database" value="${db.name}"/>
                <filter token="host" value="${app.host}"/>
                <filter token="path" value="${app.path}"/>
            </filterset>
        </copy>

        <exec executable="${script.mysql}" failonerror="true" input="${build.dir}/scripts/demo.deploy.sql">
            <arg value="-u${db.user}"/>
            <arg value="--password=${db.password}"/>
            <arg value="--host=${db.host}"/>
            <arg value="--default-character-set=utf8"/>
            <arg value="${db.name}"/>
        </exec>

        <delete file="${build.dir}/scripts/demo.template.sql"/>
        <delete file="${build.dir}/scripts/demo.deploy.sql"/>
    </target>

    <target name="build-snippets-deploy">
        <exec executable="php" dir="${basedir}/bin" failonerror="true">
            <arg line="console sw:generate:attributes"/>
        </exec>

        <exec executable="php" dir="${basedir}/bin" failonerror="true">
            <arg line="console sw:snippets:to:db --include-plugins"/>
        </exec>
    </target>

    <target name="build-cache-dir">
        <exec executable="chmod" os="Linux">
            <arg value="-R"/>
            <arg value="0777"/>
            <arg value="${cache.dir}/templates/"/>
            <arg value="${cache.dir}/general/"/>
            <arg value="${cache.dir}/proxies/"/>
        </exec>

        <delete includeEmptyDirs="true">
            <fileset dir="${cache.dir}/templates/" includes="**/*.*"/>
            <fileset dir="${cache.dir}/general/"   includes="**/*"/>
            <fileset dir="${cache.dir}/proxies"    includes="**/*.*"/>
            <fileset dir="${test.dir.shopware}/TempFiles/" includes="**/*.*"/>
        </delete>
    </target>

    <target name="build-config">
        <copy file="${basedir}/config.php.dist" toFile="${app.dir}/Configs/Custom.php" overwrite="true">
            <filterset begintoken="%" endtoken="%">
                <filter token="db.database" value="${db.name}"/>
                <filter token="db.host"     value="${db.host}"/>
                <filter token="db.user"     value="${db.user}"/>
                <filter token="db.password" value="${db.password}"/>
                <filter token="db.port"     value=""/>
            </filterset>
        </copy>
    </target>

    <target name="build-log-dir">
        <delete includeemptydirs="true">
            <fileset dir="${log.dir}" includes="**/*.*"/>
        </delete>
        <mkdir dir="${log.dir}/"/>
    </target>

    <target name="unit-library"/>

    <target name="unit-shopware" depends="build-unit">
        <exec executable="${script.phpunit}" failonerror="false" dir="${test.dir.shopware}">
            <arg value="--log-junit=${log.dir}/junit.xml"/>
            <arg value="--coverage-clover=${log.dir}/clover.xml"/>
            <arg value="--coverage-html=${log.dir}/coverage"/>
        </exec>
    </target>

    <target name="unit-shopware-continuous" depends="build-unit">
        <exec executable="${script.phpunit}" failonerror="true" dir="${test.dir.shopware}">
            <arg value="--log-junit=${log.dir}/junit.xml"/>
        </exec>
    </target>

    <target name="mink-shopware-continuous">
        <exec executable="${script.behat}" dir="${test.dir}/Mink">
            <env key="MINK_EXTENSION_PARAMS" value="base_url=http://${app.host}${app.path}"/>
            <arg value="--tags=~@javascript"/>
            <arg value="--format=pretty,junit,html"/>
            <arg value="--out=,${log.dir}/mink,${log.dir}/mink-report.html"/>
        </exec>
    </target>

    <target name="mink-shopware-continuous-functional">
        <exec executable="${script.behat}" dir="${test.dir}/Mink">
            <env key="MINK_EXTENSION_PARAMS" value="base_url=http://${app.host}${app.path}"/>
            <arg value="--format=pretty,junit,html"/>
            <arg value="--out=,${log.dir}/mink,${log.dir}/mink-report.html"/>
        </exec>
    </target>

    <target name="test-static" depends="build-log-dir">
        <parallel>
            <antcall target="static-lint"/>
            <antcall target="static-phpcs"/>
            <antcall target="static-phpmd"/>
            <antcall target="static-phpcpd"/>
            <antcall target="static-phploc"/>
            <antcall target="static-pdepend"/>
        </parallel>
    </target>

    <target name="static-lint" description="Perform syntax check of sourcecode files">
        <exec executable="bash" failonerror="true">
            <arg value="-c" />
            <arg value="find -L ${basedir}/engine/Shopware/ -name '*.php' -print0 | xargs -0 -n 1 -P 4 php -l" />
        </exec>
    </target>

    <target name="static-phpcs" description="PHP CodeSniffer">
        <exec executable="phpcs" output="/dev/null" failonerror="false">
            <arg value="--standard=${build.dir}"/>
            <arg value="--report=checkstyle"/>
            <arg value="--report-file=${log.dir}/checkstyle.xml"/>
            <arg value="--extensions=php" />
            <arg value="-n" />
            <arg value="${app.dir}/"/>
        </exec>
    </target>

    <target name="static-phpmd" description="PHP Mess Detector">
        <exec executable="phpmd" failonerror="false" error="${log.dir}/error.log" append="true">
            <arg value="${app.dir}/"/>
            <arg value="xml"/>
            <arg value="codesize,design,unusedcode"/>
            <arg value="--reportfile"/>
            <arg value="${log.dir}/pmd.xml"/>
        </exec>
    </target>

    <target name="static-phpcpd" description="PHP Copy/Paste Detector">
        <exec executable="phpcpd" failonerror="false" output="/dev/null" error="${log.dir}/error.log" append="true">
            <arg value="--log-pmd"/>
            <arg value="${log.dir}/cpd.xml"/>
            <arg value="${app.dir}/"/>
        </exec>
    </target>

    <target name="static-phploc" description="PHP Lines of Code">
        <exec executable="phploc" failonerror="false" output="${log.dir}/loc.txt" error="${log.dir}/error.log" append="true">
            <arg value="--log-xml"/>
            <arg value="${log.dir}/loc.xml"/>
            <arg value="--log-csv"/>
            <arg value="${log.dir}/loc.csv"/>
            <arg value="--count-tests"/>
            <arg value="${app.dir}/"/>
        </exec>
    </target>

    <target name="static-phpstyle" description="PHP CheckStyle">
        <exec executable="phpdoc" failonerror="false" output="/dev/null" error="${log.dir}/error.log" append="true">
            <arg value="project:run"/>
            <arg value="--template"/>
            <arg value="checkstyle"/>
            <arg value="-t"/>
            <arg value="${log.dir}/checkstyle/"/>
            <arg value="-d"/>
            <arg value="${app.dir}"/>
            <arg value="-q"/>
        </exec>
        <replaceregexp file="${log.dir}/checkstyle/checkstyle.xml"
                       match="name=&quot;([^/][^&quot;]*)&quot;"
                       replace="name=&quot;${app.dir}/\1&quot;"
                       byline="true"
                />
    </target>

    <target name="static-pdepend">
        <mkdir dir="${log.dir}/depend"/>
        <exec executable="pdepend" failonerror="false" output="${log.dir}/depend/output.txt" error="${log.dir}/error.log" append="true" dir="${app.dir}">
            <arg value="--summary-xml=${log.dir}/depend/summary.xml"/>
            <arg value="--jdepend-chart=${log.dir}/depend/jdepend.svg"/>
            <arg value="--overview-pyramid=${log.dir}/depend/pyramid.svg"/>
            <arg value="${app.dir}"/>
        </exec>
    </target>

    <target name="build-phpcb" description="Build CodeBrowser">
        <exec executable="phpcb" failonerror="false" output="/dev/null" error="${log.dir}/error.log" append="true">
            <arg value="-l${log.dir}"/>
            <arg value="-o${log.dir}/code-browser"/>
            <arg value="-s${app.dir}"/>
        </exec>
    </target>

    <target name="build-phpdoc">
        <exec executable="phpdoc" failonerror="false" error="${log.dir}/error.log" append="true">
            <arg value="project:run"/>
            <arg value="-d${app.dir}"/>
            <arg value="-t${log.dir}/api"/>
            <arg value="-i${app.dir}/Plugins/Default/*Payment*"/>
            <arg value="--template"/>
            <arg value="shopware"/>
            <arg value="--title"/>
            <arg value="Shopware"/>
            <arg value="--defaultpackagename"/>
            <arg value="Shopware"/>
            <arg value="--encoding"/>
            <arg value="utf-8"/>
            <arg value="--sourcecode"/>
            <arg value="--quiet"/>
        </exec>
    </target>

    <!--
        Installation of sass/compass on Debian/Ubuntu

        sudo aptitude install rubygems
        sudo gem update
        sudo gem install sass
        sudo gem install compass
    -->
    <target name="compile-extjs">
        <exec executable="compass" dir="${basedir}/templates/_default/backend/_resources">
            <arg value="compile"/>
            <arg value="--force"/>
            <arg value="resources/sass/"/>
        </exec>
    </target>

    <target name="watch-extjs">
        <exec executable="compass" dir="${basedir}/templates/_default/backend/_resources">
            <arg value="watch"/>
            <arg value="resources/sass/"/>
        </exec>
    </target>

    <target name="compile-tinymce" description="Builds a TinyMce package with default used plugins">
        <!-- Combine all files -->
        <concat destfile="${basedir}/engine/Library/TinyMce/tiny_mce_full.js">
            <fileset dir="${basedir}/engine/Library/TinyMce/" includes="tiny_mce.js" />
            <fileset dir="${basedir}/engine/Library/TinyMce/" includes="themes/advanced/langs/en.js" />
            <fileset dir="${basedir}/engine/Library/TinyMce/" includes="themes/advanced/langs/de.js" />
            <fileset dir="${basedir}/engine/Library/TinyMce/" includes="plugins/media_selection/editor_plugin.js" />
            <fileset dir="${basedir}/engine/Library/TinyMce/" includes="plugins/fullscreen/editor_plugin.js" />
        </concat>
    </target>
</project>
